#####################################################################################
# Global
#
#- name: Gathering facts if it was not done before
#  setup:
#  when: ansible_facts['os_family'] is not defined

### 

- name: Updating repositories...
  apt: update_cache=yes cache_valid_time=3600 force=yes
  become: true
  changed_when: false

- name: Install nginx
  apt:
    state: latest
    pkg: nginx-core
  become: true
  register: st1

- name: Ensure pip is installed
  package:
    name: python3-pip
    state: present
  become: true

- name: Install cryptography python module
  pip:
    name: cryptography
    state: present
    executable: pip3
  become: true

- name: Create folders
  file:
    path: "{{item.path}}"
    state: directory
    mode: "{{ item.mode }}"
  become: true
  loop:
    - { mode: 755, path: "/etc/nginx/cert" }

- name: Remove default nginx configs
  file: 
    name: "{{ item }}"
    state: absent
  with_items:
    - '/etc/nginx/sites-available/default'
    - '/etc/nginx/sites-enabled/default'
  become: true
  register: default_conf

- name: Generate dhparams.pem for nginx if it not exists
  shell: "openssl dhparam -out /etc/nginx/dhparams.pem 2048"
  args:
    creates: "/etc/nginx/dhparams.pem"
  check_mode: no
  become: true

- name: Generate a Private Key
  openssl_privatekey:
    path: /etc/nginx/cert/proxy.key
    size: 4096
  become: true

- name: Generate a CSR (Certificate Signing Request)
  openssl_csr:
    path: /etc/nginx/cert/proxy.csr
    privatekey_path: /etc/nginx/cert/proxy.key
    common_name: "{{ inventory_hostname }}"
  become: true

- name: Generate a Self-Signed Certificate
  openssl_certificate:
    path: /etc/nginx/cert/proxy.crt
    privatekey_path: /etc/nginx/cert/proxy.key
    csr_path: /etc/nginx/cert/proxy.csr
    provider: selfsigned
  become: true

- name: Deploy config files
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dst }}"
    mode: "{{ item.mode }}"
  become: true
  loop:
    - { mode: 644, src: "nginx/proxy.conf", dst: "/etc/nginx/conf.d/proxy.conf" }
  register: st2

- name: Restart nginx after config change
  service:
    name: nginx
    state: restarted
  become: true
  when: >
    default_conf.changed or 
    st1.changed or 
    st2.changed

- name: Allow new incoming SYN packets on TCP (Proxy)
  ansible.builtin.iptables:
    chain: INPUT
    protocol: tcp
    destination: "{{ubuntu_exporter_proxy_listen_ip}}"
    destination_port: "{{ ubuntu_exporter_proxy_listen_port }}"
    ctstate: NEW
    syn: match
    source: "{{item}}"
    jump: ACCEPT
    comment: "Proxy {{item}}"
  become: true
  loop: "{{proxy_allow}}"
  register: iptables

- name: Save iptables rules
  shell: |
    iptables-save | grep -v 'TEMP ' | grep -v 'LIBVIRT_' \
    | grep -v -i 'docker' | grep -v 'A FORWARD ' \
    | grep -v 'ufw-' >/etc/iptables/rules.v4
  become: true
  when: iptables.changed
  check_mode: no

